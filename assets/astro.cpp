
#include "astro.h"

namespace astro {

double astor(double a) {
    return a * (M_PI / (180.0 * 3600.0));
}

double dtr(double d) {
    return (d * M_PI) / 180.0;
}

double rtd(double r) {
    return (r * 180.0) / M_PI;
}

double fixangle(double a) {
    return a - 360.0 * std::floor(a / 360.0);
}

double fixangr(double a) {
    return a - (2 * M_PI) * std::floor(a / (2 * M_PI));
}

double dsin(double d) {
    return std::sin(dtr(d));
}

double dcos(double d) {
    return std::cos(dtr(d));
}

double mod(double a, double b) {
    return a - (b * std::floor(a / b));
}

double amod(double a, double b) {
    return mod(a - 1, b) + 1;
}

std::array<int, 3> jhms(double j) {
    j += 0.5;
    int ij = static_cast<int>(((j - std::floor(j)) * 86400.0) + 0.5);
    return { ij / 3600, (ij / 60) % 60, ij % 60 };
}

int jwday(double j) {
    return static_cast<int>(mod(std::floor((j + 1.5)), 7));
}

// Definitions for obliqeq, nutation, ecliptoeq, deltat will be added next...

} // namespace astro

double obliqeq(double jd) {
    static const double oterms[10] = {
        -4680.93, -1.55, 1999.25, -51.38, -249.67,
        -39.05, 7.12, 27.87, 5.79, 2.45
    };

    double u = (jd - J2000) / (JulianCentury * 100.0);
    double v = u;
    double eps = 23.0 + (26.0 / 60.0) + (21.448 / 3600.0);

    if (std::abs(u) < 1.0) {
        for (int i = 0; i < 10; ++i) {
            eps += (oterms[i] / 3600.0) * v;
            v *= u;
        }
    }
    return eps;
}

std::array<double, 2> nutation(double jd) {
    static const int nutArgMult[63][5] = {
        { 0, 0, 0, 0, 1 }, {-2, 0, 0, 2, 2 }, { 0, 0, 0, 2, 2 }, { 0, 0, 0, 0, 2 },
        { 0, 1, 0, 0, 0 }, { 0, 0, 1, 0, 0 }, {-2, 1, 0, 2, 2 }, { 0, 0, 0, 2, 1 },
        { 0, 0, 1, 2, 2 }, {-2, -1, 0, 2, 2 }, {-2, 0, 1, 0, 0 }, {-2, 0, 0, 2, 1 },
        { 0, 0, -1, 2, 2 }, { 2, 0, 0, 0, 0 }, { 0, 0, 1, 0, 1 }, { 2, 0, -1, 2, 2 },
        { 0, 0, -1, 0, 1 }, { 0, 0, 1, 2, 1 }, {-2, 0, 2, 0, 0 }, { 0, 0, -2, 2, 1 },
        { 2, 0, 0, 2, 2 }, { 0, 0, 2, 2, 2 }, { 0, 0, 2, 0, 0 }, {-2, 0, 1, 2, 2 },
        { 0, 0, 0, 2, 0 }, {-2, 0, 0, 2, 0 }, { 0, 0, -1, 2, 1 }, { 0, 2, 0, 0, 0 },
        { 2, 0, -1, 0, 1 }, {-2, 2, 0, 2, 2 }, { 0, 1, 0, 0, 1 }, {-2, 0, 1, 0, 1 },
        { 0, -1, 0, 0, 1 }, { 0, 0, 2, -2, 0 }, { 2, 0, -1, 2, 1 }, { 2, 0, 1, 2, 2 },
        { 0, 1, 0, 2, 2 }, {-2, 1, 1, 0, 0 }, { 0, -1, 0, 2, 2 }, { 2, 0, 0, 2, 1 },
        { 2, 0, 1, 0, 0 }, {-2, 0, 2, 2, 2 }, {-2, 0, 1, 2, 1 }, { 2, 0, -2, 0, 1 },
        { 2, 0, 0, 0, 1 }, { 0, -1, 1, 0, 0 }, {-2, -1, 0, 2, 1 }, {-2, 0, 0, 0, 1 },
        { 0, 0, 2, 2, 1 }, {-2, 0, 2, 0, 1 }, {-2, 1, 0, 2, 1 }, { 0, 0, 1, -2, 0 },
        {-1, 0, 1, 0, 0 }, {-2, 1, 0, 0, 0 }, { 1, 0, 0, 0, 0 }, { 0, 0, 1, 2, 0 },
        {-1, -1, 1, 0, 0 }, { 0, 1, 1, 0, 0 }, { 0, -1, 1, 2, 2 }, { 2, -1, -1, 2, 2 },
        { 0, 0, -2, 2, 2 }, { 0, 0, 3, 2, 2 }, { 2, -1, 0, 2, 2 }
    };

    static const int nutArgCoeff[63][4] = {
        {-171996, -1742, 92095, 89 }, {-13187, -16, 5736, -31 },
        {-2274, -2, 977, -5 }, {2062, 2, -895, 5 }, {1426, -34, 54, -1 },
        {712, 1, -7, 0 }, {-517, 12, 224, -6 }, {-386, -4, 200, 0 },
        {-301, 0, 129, -1 }, {217, -5, -95, 3 }, {-158, 0, 0, 0 },
        {129, 1, -70, 0 }, {123, 0, -53, 0 }, {63, 0, 0, 0 },
        {63, 1, -33, 0 }, {-59, 0, 26, 0 }, {-58, -1, 32, 0 },
        {-51, 0, 27, 0 }, {48, 0, 0, 0 }, {46, 0, -24, 0 },
        {-38, 0, 16, 0 }, {-31, 0, 13, 0 }, {29, 0, 0, 0 },
        {29, 0, -12, 0 }, {26, 0, 0, 0 }, {-22, 0, 0, 0 },
        {21, 0, -10, 0 }, {17, -1, 0, 0 }, {16, 0, -8, 0 },
        {-16, 1, 7, 0 }, {-15, 0, 9, 0 }, {-13, 0, 7, 0 },
        {-12, 0, 6, 0 }, {11, 0, 0, 0 }, {-10, 0, 5, 0 },
        {-8, 0, 3, 0 }, {7, 0, -3, 0 }, {-7, 0, 0, 0 },
        {-7, 0, 3, 0 }, {-7, 0, 3, 0 }, {6, 0, 0, 0 },
        {6, 0, -3, 0 }, {6, 0, -3, 0 }, {-6, 0, 3, 0 },
        {-6, 0, 3, 0 }, {5, 0, 0, 0 }, {-5, 0, 3, 0 },
        {-5, 0, 3, 0 }, {-5, 0, 3, 0 }, {4, 0, 0, 0 },
        {4, 0, 0, 0 }, {4, 0, 0, 0 }, {-4, 0, 0, 0 },
        {-4, 0, 0, 0 }, {-4, 0, 0, 0 }, {3, 0, 0, 0 },
        {-3, 0, 0, 0 }, {-3, 0, 0, 0 }, {-3, 0, 0, 0 },
        {-3, 0, 0, 0 }, {-3, 0, 0, 0 }, {-3, 0, 0, 0 },
        {-3, 0, 0, 0 }
    };

    double t = (jd - 2451545.0) / 36525.0;
    double t2 = t * t;
    double t3 = t * t2;
    double ta[5];

    ta[0] = fixangr(dtr(297.850363 + 445267.11148 * t - 0.0019142 * t2 + t3 / 189474.0));
    ta[1] = fixangr(dtr(357.52772 + 35999.05034 * t - 0.0001603 * t2 - t3 / 300000.0));
    ta[2] = fixangr(dtr(134.96298 + 477198.867398 * t + 0.0086972 * t2 + t3 / 56250.0));
    ta[3] = fixangr(dtr(93.27191 + 483202.017538 * t - 0.0036825 * t2 + t3 / 327270.0));
    ta[4] = fixangr(dtr(125.04452 - 1934.136261 * t + 0.0020708 * t2 + t3 / 450000.0));

    double dp = 0, de = 0;
    for (int i = 0; i < 63; ++i) {
        double ang = 0;
        for (int j = 0; j < 5; ++j) {
            ang += nutArgMult[i][j] * ta[j];
        }
        dp += (nutArgCoeff[i][0] + nutArgCoeff[i][1] * t / 10.0) * std::sin(ang);
        de += (nutArgCoeff[i][2] + nutArgCoeff[i][3] * t / 10.0) * std::cos(ang);
    }

    return { dp / (3600.0 * 10000.0), de / (3600.0 * 10000.0) };
}

std::array<double, 2> ecliptoeq(double jd, double Lambda, double Beta) {
    double eps = dtr(obliqeq(jd));
    double Ra = std::atan2(std::cos(eps) * std::sin(dtr(Lambda)) -
                           std::tan(dtr(Beta)) * std::sin(eps),
                           std::cos(dtr(Lambda)));
    Ra = fixangle(rtd(Ra));
    double Dec = rtd(std::asin(std::sin(eps) * std::sin(dtr(Lambda)) * std::cos(dtr(Beta)) +
                               std::sin(dtr(Beta)) * std::cos(eps)));
    return { Ra, Dec };
}

double deltat(double year) {
    static const double deltaTtab[] = {
        121, 112, 103, 95, 88, 82, 77, 72, 68, 63, 60, 56, 53, 51, 48, 46,
        44, 42, 40, 38, 35, 33, 31, 29, 26, 24, 22, 20, 18, 16, 14, 12,
        11, 10, 9, 8, 7, 7, 7, 7, 7, 7, 8, 8, 9, 9, 9, 9, 9, 10, 10, 10,
        10, 10, 10, 10, 10, 11, 11, 11, 11, 11, 12, 12, 12, 12, 13, 13,
        13, 14, 14, 14, 14, 15, 15, 15, 15, 15, 16, 16, 16, 16, 16, 16,
        16, 16, 15, 15, 14, 13, 13.1, 12.5, 12.2, 12, 12, 12, 12, 12, 12,
        11.9, 11.6, 11, 10.2, 9.2, 8.2, 7.1, 6.2, 5.6, 5.4, 5.3, 5.4, 5.6,
        5.9, 6.2, 6.5, 6.8, 7.1, 7.3, 7.5, 7.6, 7.7, 7.3, 6.2, 5.2, 2.7,
        1.4, -1.2, -2.8, -3.8, -4.8, -5.5, -5.3, -5.6, -5.7, -5.9, -6,
        -6.3, -6.5, -6.2, -4.7, -2.8, -0.1, 2.6, 5.3, 7.7, 10.4, 13.3, 16,
        18.2, 20.2, 21.1, 22.4, 23.5, 23.8, 24.3, 24, 23.9, 23.9, 23.7,
        24, 24.3, 25.3, 26.2, 27.3, 28.2, 29.1, 30, 30.7, 31.4, 32.2,
        33.1, 34, 35, 36.5, 38.3, 40.2, 42.2, 44.5, 46.5, 48.5, 50.5,
        52.2, 53.8, 54.9, 55.8, 56.9, 58.3, 60, 61.6, 63, 65, 66.6
    };

    double dt, f, t;
    if (year >= 1620 && year <= 2000) {
        int i = static_cast<int>(std::floor((year - 1620) / 2.0));
        f = ((year - 1620) / 2.0) - i;
        dt = deltaTtab[i] + ((deltaTtab[i + 1] - deltaTtab[i]) * f);
    } else {
        t = (year - 2000) / 100.0;
        if (year < 948) {
            dt = 2177 + (497 * t) + (44.1 * t * t);
        } else {
            dt = 102 + (102 * t) + (25.3 * t * t);
            if (year > 2000 && year < 2100) {
                dt += 0.37 * (year - 2100);
            }
        }
    }
    return dt;
}
